#version 450 core
//Il faut recuperer les coordonnees UV 
in vec2 UV;

in vec3 Normal_cameraspace;

in vec3 LightDirection_cameraspace;

in vec3 EyeDirection_cameraspace;

out vec3 color;

uniform vec3 lightColor;
uniform float LightPower;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

void main() {

		float distance = length(LightDirection_cameraspace);

		vec3 n = normalize(Normal_cameraspace);
		vec3 l = normalize(LightDirection_cameraspace);

		// Cosine of the angle between the normal and the light direction,
		// clamped above 0
		//  - light is at the vertical of the triangle -> 1
		//  - light is perpendicular to the triangle -> 0
		//  - light is behind the triangle -> 0
		float cosTheta = clamp( dot( n,l ), 0,1 );
		
		vec3 materialDiffusColor = texture(myTextureSampler,UV).rgb;
		
		// Eye vector (towards the camera)
		vec3 E = normalize(EyeDirection_cameraspace);
		// Direction in which the triangle reflects the light
		vec3 R = reflect(-l,n);
		// Cosine of the angle between the Eye vector and the Reflect vector,
		// clamped to 0
		//  - Looking into the reflection -> 1
		//  - Looking elsewhere -> < 1
		float cosAlpha = clamp( dot( E,R ), 0,1 );
	
		vec3 ambiantMaterialColor = vec3(0.2,0.2,0.2) * materialDiffusColor;
		vec3 MaterialSpecularColor = lightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
		color = MaterialSpecularColor + ambiantMaterialColor + materialDiffusColor * lightColor * LightPower  * cosTheta /(distance*distance);
		// color = vec3(1,0,0);
		

}